{"version":3,"file":"static/js/755.bb581492.chunk.js","mappings":"0RAuDA,QAlDA,WACE,MAAOA,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,QACtCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,iBACtCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,OACpCK,EAAeC,IAAoBN,EAAAA,EAAAA,UAAS,IAUnD,OACIO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAgBC,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,IAAK,OAAQC,OAAQ,QAASC,SAAA,EAC9GC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,SACEC,KAAK,iBACLC,MAAOd,IAAa,IAAIe,MAAOC,cAC/BC,SAAWC,GAAMjB,EAAaiB,EAAEC,OAAOL,UAGzCV,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEC,QAAS,OAAQE,IAAK,QAASE,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,UAAQE,MAAOnB,EAAYsB,SAAWC,GAAMtB,EAAcsB,EAAEC,OAAOL,OAAOH,SACvES,EAAUC,IAAKC,IACdV,EAAAA,EAAAA,KAAA,UAAiBE,MAAOQ,EAAGX,SAAEW,GAAhBA,OAIjBV,EAAAA,EAAAA,KAAA,QAAAD,SAAM,YAENC,EAAAA,EAAAA,KAAA,UAAQE,MAAOhB,EAAYmB,SAAWC,GAAMnB,EAAcmB,EAAEC,OAAOL,OAAOH,SACvES,EAAUC,IAAKC,IACdV,EAAAA,EAAAA,KAAA,UAAiBE,MAAOQ,EAAGX,SAAEW,GAAhBA,UAKnBV,EAAAA,EAAAA,KAAA,UAAQW,QAjCQC,KACpB,IAAKxB,EAAW,OAEhB,MACMyB,EADKC,EAAAA,GAASC,QAAQ3B,EAAW,CAAE4B,KAAMjC,IAC1BkC,QAAQ/B,GAAYgC,SAAS,4BAClD3B,EAAiBsB,IA4BkBd,SAAC,YAE/BT,IACCE,EAAAA,EAAAA,MAAA,OAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAwB,IAAET,OAK9C,C","sources":["Components/TimezoneConvertor/TimezoneConverter.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { DateTime } from 'luxon';\nimport timezones from './timezones.json'; // A list of IANA timezones\nimport '../../App.css';\n\nfunction TimezoneConverter() {\n  const [sourceZone, setSourceZone] = useState('UTC');\n  const [targetZone, setTargetZone] = useState('Asia/Kolkata');\n  const [inputTime, setInputTime] = useState(null);\n  const [convertedTime, setConvertedTime] = useState('');\n\n  const handleConvert = () => {\n    if (!inputTime) return;\n\n    const dt = DateTime.fromISO(inputTime, { zone: sourceZone });\n    const converted = dt.setZone(targetZone).toFormat('yyyy-LL-dd HH:mm:ss ZZZZ');\n    setConvertedTime(converted);\n  };\n  \n  return (\n      <div className='app-container' style={{ display: 'flex', flexDirection: 'column', gap: '10px', margin: '20px' }}>\n        <h3>Timezone Convertor</h3>\n        <input\n          type=\"datetime-local\"\n          value={inputTime || new Date().toUTCString()}\n          onChange={(e) => setInputTime(e.target.value)}\n        />\n\n        <div style={{ display: 'flex', gap: '10px' }}>\n          <select value={sourceZone} onChange={(e) => setSourceZone(e.target.value)}>\n            {timezones.map((tz) => (\n              <option key={tz} value={tz}>{tz}</option>\n            ))}\n          </select>\n\n          <span>â†’</span>\n\n          <select value={targetZone} onChange={(e) => setTargetZone(e.target.value)}>\n            {timezones.map((tz) => (\n              <option key={tz} value={tz}>{tz}</option>\n            ))}\n          </select>\n        </div>\n\n        <button onClick={handleConvert}>Convert</button>\n\n        {convertedTime && (\n          <div>\n            <strong>Converted Time:</strong> {convertedTime}\n          </div>\n        )}\n      </div>\n  );\n}\n\nexport default TimezoneConverter;\n"],"names":["sourceZone","setSourceZone","useState","targetZone","setTargetZone","inputTime","setInputTime","convertedTime","setConvertedTime","_jsxs","className","style","display","flexDirection","gap","margin","children","_jsx","type","value","Date","toUTCString","onChange","e","target","timezones","map","tz","onClick","handleConvert","converted","DateTime","fromISO","zone","setZone","toFormat"],"sourceRoot":""}