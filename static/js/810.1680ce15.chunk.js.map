{"version":3,"file":"static/js/810.1680ce15.chunk.js","mappings":"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","sources":["Components/SvgEditor.jsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\n\nconst SvgEditor = () => {\n  const [shapes, setShapes] = useState([]);\n  const [currentShape, setCurrentShape] = useState(null);\n  const [draggingIndex, setDraggingIndex] = useState(null);\n  const [tool, setTool] = useState('rectangle'); // 'rectangle', 'circle', 'line'\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const savedShapes = localStorage.getItem('svg-shapes');\n    if (savedShapes) {\n      setShapes(JSON.parse(savedShapes));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('svg-shapes', JSON.stringify(shapes));\n  }, [shapes]);\n\n  const handleMouseDown = (e) => {\n    const svg = e.target.closest('svg');\n    const rect = svg.getBoundingClientRect();\n    const startX = e.clientX - rect.left;\n    const startY = e.clientY - rect.top;\n\n    if (tool === 'rectangle') {\n      setCurrentShape({ type: 'rectangle', x: startX, y: startY, width: 0, height: 0 });\n    } else if (tool === 'circle') {\n      setCurrentShape({ type: 'circle', cx: startX, cy: startY, r: 0 });\n    } else if (tool === 'line') {\n      setCurrentShape({ type: 'line', x1: startX, y1: startY, x2: startX, y2: startY });\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (!currentShape) return;\n\n    const svg = e.target.closest('svg');\n    const rect = svg.getBoundingClientRect();\n    const currentX = e.clientX - rect.left;\n    const currentY = e.clientY - rect.top;\n\n    if (currentShape.type === 'rectangle') {\n      setCurrentShape({\n        ...currentShape,\n        width: currentX - currentShape.x,\n        height: currentY - currentShape.y,\n      });\n    } else if (currentShape.type === 'circle') {\n      const dx = currentX - currentShape.cx;\n      const dy = currentY - currentShape.cy;\n      setCurrentShape({\n        ...currentShape,\n        r: Math.sqrt(dx * dx + dy * dy),\n      });\n    } else if (currentShape.type === 'line') {\n      setCurrentShape({\n        ...currentShape,\n        x2: currentX,\n        y2: currentY,\n      });\n    }\n  };\n\n  const handleMouseUp = () => {\n    if (currentShape) {\n      setShapes([...shapes, currentShape]);\n      setCurrentShape(null);\n    }\n  };\n\n  const handleShapeMouseDown = (index, e) => {\n    e.stopPropagation();\n    setDraggingIndex(index);\n  };\n\n  const handleShapeMouseMove = (e) => {\n    if (draggingIndex === null) return;\n\n    const svg = e.target.closest('svg');\n    const rect = svg.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    const updatedShapes = shapes.map((shape, i) =>\n      i === draggingIndex ? { ...shape, x, y } : shape\n    );\n    setShapes(updatedShapes);\n  };\n\n  const handleShapeMouseUp = () => {\n    setDraggingIndex(null);\n  };\n\n  const handleExport = () => {\n    const svgElement = document.getElementById('svg-canvas');\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'drawing.svg';\n    link.click();\n  };\n\n  const handleImport = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(event.target.result, 'image/svg+xml');\n      const importedShapes = [];\n      const svg = doc.querySelector('svg');\n      const viewBox = svg.getAttribute('viewBox');\n      const [minX, minY, width, height] = viewBox ? viewBox.split(' ').map(Number) : [0, 0, svg.clientWidth, svg.clientHeight];\n\n      const normalize = (x, y) => ({\n        x: (x - minX) * 800 / width,\n        y: (y - minY) * 600 / height,\n      });\n\n      svg.querySelectorAll('rect').forEach((rect) => {\n        const { x, y } = normalize(Number(rect.getAttribute('x')), Number(rect.getAttribute('y')));\n        importedShapes.push({\n          type: 'rectangle',\n          x,\n          y,\n          width: Number(rect.getAttribute('width')) * 800 / width,\n          height: Number(rect.getAttribute('height')) * 600 / height,\n        });\n      });\n\n      svg.querySelectorAll('circle').forEach((circle) => {\n        const { x: cx, y: cy } = normalize(Number(circle.getAttribute('cx')), Number(circle.getAttribute('cy')));\n        importedShapes.push({\n          type: 'circle',\n          cx,\n          cy,\n          r: Number(circle.getAttribute('r')) * 800 / width,\n        });\n      });\n\n      svg.querySelectorAll('line').forEach((line) => {\n        const { x: x1, y: y1 } = normalize(Number(line.getAttribute('x1')), Number(line.getAttribute('y1')));\n        const { x: x2, y: y2 } = normalize(Number(line.getAttribute('x2')), Number(line.getAttribute('y2')));\n        importedShapes.push({\n          type: 'line',\n          x1,\n          y1,\n          x2,\n          y2,\n        });\n      });\n\n      setShapes(importedShapes);\n      setError('');\n    };\n\n    reader.onerror = () => {\n      setError('Failed to read the file. Please ensure it is a valid SVG file.');\n    };\n\n    reader.readAsText(file);\n  };\n\n  const handleUndo = () => {\n    if (shapes.length > 0) {\n      setShapes(shapes.slice(0, -1));\n    }\n  };\n\n  const handleRedo = () => {\n    // Implement redo functionality if needed\n  };\n\n  return (\n    <div className='app-container'>\n      <h3>SVG Editor</h3>\n      <div style={{ marginBottom: 10 }}>\n        <button onClick={() => setTool('rectangle')}>Rectangle</button>\n        <button onClick={() => setTool('circle')}>Circle</button>\n        <button onClick={() => setTool('line')}>Line</button>\n        <button onClick={handleExport}>Export SVG</button>\n        <input type=\"file\" accept=\"image/svg+xml\" onChange={handleImport} />\n        <button onClick={handleUndo}>Undo</button>\n        <button onClick={handleRedo}>Redo</button>\n      </div>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n      <svg\n        id=\"svg-canvas\"\n        width=\"800\"\n        height=\"600\"\n        style={{ border: '1px solid black' }}\n        onMouseDown={handleMouseDown}\n        onMouseMove={(e) => {\n          handleMouseMove(e);\n          handleShapeMouseMove(e);\n        }}\n        onMouseUp={() => {\n          handleMouseUp();\n          handleShapeMouseUp();\n        }}\n      >\n        {shapes.map((shape, i) => {\n          if (shape.type === 'rectangle') {\n            return (\n              <rect\n                key={i}\n                x={shape.x}\n                y={shape.y}\n                width={shape.width}\n                height={shape.height}\n                fill=\"rgba(0, 0, 255, 0.3)\"\n                stroke=\"blue\"\n                onMouseDown={(e) => handleShapeMouseDown(i, e)}\n              />\n            );\n          } else if (shape.type === 'circle') {\n            return (\n              <circle\n                key={i}\n                cx={shape.cx}\n                cy={shape.cy}\n                r={shape.r}\n                fill=\"rgba(0, 0, 255, 0.3)\"\n                stroke=\"blue\"\n                onMouseDown={(e) => handleShapeMouseDown(i, e)}\n              />\n            );\n          } else if (shape.type === 'line') {\n            return (\n              <line\n                key={i}\n                x1={shape.x1}\n                y1={shape.y1}\n                x2={shape.x2}\n                y2={shape.y2}\n                stroke=\"blue\"\n                onMouseDown={(e) => handleShapeMouseDown(i, e)}\n              />\n            );\n          }\n          return null;\n        })}\n        {currentShape && (\n          currentShape.type === 'rectangle' ? (\n            <rect\n              x={currentShape.x}\n              y={currentShape.y}\n              width={currentShape.width}\n              height={currentShape.height}\n              fill=\"rgba(0, 255, 0, 0.3)\"\n              stroke=\"green\"\n            />\n          ) : currentShape.type === 'circle' ? (\n            <circle\n              cx={currentShape.cx}\n              cy={currentShape.cy}\n              r={currentShape.r}\n              fill=\"rgba(0, 255, 0, 0.3)\"\n              stroke=\"green\"\n            />\n          ) : currentShape.type === 'line' ? (\n            <line\n              x1={currentShape.x1}\n              y1={currentShape.y1}\n              x2={currentShape.x2}\n              y2={currentShape.y2}\n              stroke=\"green\"\n            />\n          ) : null\n        )}\n      </svg>\n    </div>\n  );\n};\n\nexport default SvgEditor;\n"],"names":["SvgEditor","shapes","setShapes","useState","currentShape","setCurrentShape","draggingIndex","setDraggingIndex","tool","setTool","error","setError","useEffect","savedShapes","localStorage","getItem","JSON","parse","setItem","stringify","handleShapeMouseDown","index","e","stopPropagation","_jsxs","className","children","_jsx","style","marginBottom","onClick","handleExport","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","link","createElement","href","download","click","accept","onChange","file","target","files","reader","FileReader","onload","event","doc","DOMParser","parseFromString","result","importedShapes","svg","querySelector","viewBox","getAttribute","minX","minY","width","height","split","map","Number","clientWidth","clientHeight","normalize","x","y","querySelectorAll","forEach","rect","push","circle","cx","cy","r","line","x1","y1","x2","y2","onerror","readAsText","handleUndo","length","slice","handleRedo","color","id","border","onMouseDown","closest","getBoundingClientRect","startX","clientX","left","startY","clientY","top","onMouseMove","currentX","currentY","_objectSpread","dx","dy","Math","sqrt","handleMouseMove","updatedShapes","shape","i","handleShapeMouseMove","onMouseUp","fill","stroke"],"sourceRoot":""}