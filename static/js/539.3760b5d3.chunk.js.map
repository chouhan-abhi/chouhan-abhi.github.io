{"version":3,"file":"static/js/539.3760b5d3.chunk.js","mappings":"uJA4GA,QA1GA,WACE,MAAOA,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KACjC,MAAMC,EAAQC,aAAaC,QAAQ,cACnC,OAAOF,EAAQG,KAAKC,MAAMJ,GAAS,MAG9BK,EAAOC,IAAYP,EAAAA,EAAAA,UAAS,KAEnCQ,EAAAA,EAAAA,WAAU,KACRN,aAAaO,QAAQ,aAAcL,KAAKM,UAAUZ,KACjD,CAACA,IAEJ,MAsBMa,EAAcA,CAACC,EAAWC,KAC9B,MAAMC,EAAQ,IAAIC,KAAKH,GAEjBI,EADM,IAAID,KAAKF,GACAC,EAEfG,EAAUC,KAAKC,MAAMH,EAAS,KAC9BI,EAAUF,KAAKC,MAAOH,EAAS,IAAS,KAE9C,MAAM,GAANK,OAAUJ,EAAO,MAAAI,OAAKD,EAAO,MAG/B,OACEE,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,SAAU,QAASC,OAAQ,OAAQC,WAAY,SAAUC,SAAA,EACtFN,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEM,QAAS,OAAQC,IAAK,QAASF,SAAA,EAC3CG,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,MAAO3B,EACP4B,SAAWC,GAAM5B,EAAS4B,EAAEC,OAAOH,OACnCI,YAAY,aACZd,MAAO,CAAEe,KAAM,MAEjBP,EAAAA,EAAAA,KAAA,UAAQQ,QA3CEC,KACd,GAAqB,KAAjBlC,EAAMmC,OAAe,OACzB,MAAMC,EAAU,CACdC,KAAMrC,EACNsC,WAAW,EACXhC,WAAW,IAAIG,MAAO8B,cACtBhC,YAAa,MAEfd,EAAS,IAAID,EAAO4C,IACpBnC,EAAS,KAkCoBqB,SAAC,YAG5BG,EAAAA,EAAAA,KAAA,MAAIR,MAAO,CAAEuB,UAAW,OAAQtB,QAAS,EAAGuB,UAAW,QAASnB,SAC7D9B,EAAMkD,IAAI,CAACC,EAAMC,KAChBnB,EAAAA,EAAAA,KAAA,MAEER,MAAO,CACL4B,aAAc,OACdtB,QAAS,OACTuB,WAAY,SACZC,eAAgB,gBAChBC,WAAY,UACZ9B,QAAS,OACT+B,aAAc,OACd3B,UAEFN,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEM,QAAS,OAAQuB,WAAY,SAAUtB,IAAK,QAASF,SAAA,EACjEG,EAAAA,EAAAA,KAAA,SACEC,KAAK,WACLwB,QAASP,EAAKL,UACdV,SAAUA,IApDJgB,KAClB,MAAMO,EAAU,IAAI3D,GACdmD,EAAOQ,EAAQP,GAErBD,EAAKL,WAAaK,EAAKL,UACvBK,EAAKpC,YAAcoC,EAAKL,WAAY,IAAI7B,MAAO8B,cAAgB,KAE/D9C,EAAS0D,IA6CmBC,CAAWR,MAE7B5B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEG,EAAAA,EAAAA,KAAA,OACER,MAAO,CACLoC,eAAgBV,EAAKL,UAAY,eAAiB,OAClDgB,MAAOX,EAAKL,UAAY,OAAS,QACjChB,SAEDqB,EAAKN,QAERrB,EAAAA,EAAAA,MAAA,SAAOC,MAAO,CAAEqC,MAAO,QAAShC,SAAA,CAAC,UACvB,IAAIb,KAAKkC,EAAKrC,WAAWiD,iBAChCZ,EAAKpC,cACJS,EAAAA,EAAAA,MAAAwC,EAAAA,SAAA,CAAAlC,SAAA,EACEG,EAAAA,EAAAA,KAAA,SAAM,cACM,IAAIhB,KAAKkC,EAAKpC,aAAagD,kBAAiB9B,EAAAA,EAAAA,KAAA,SAAM,oBACjDpB,EAAYsC,EAAKrC,UAAWqC,EAAKpC,0BAhCnDqC,QA2CjB,C","sources":["Components/ToDo.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ToDo() {\n  const [tasks, setTasks] = useState(() => {\n    const saved = localStorage.getItem('todo-tasks');\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('todo-tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addTask = () => {\n    if (input.trim() === '') return;\n    const newTask = {\n      text: input,\n      completed: false,\n      createdAt: new Date().toISOString(),\n      completedAt: null,\n    };\n    setTasks([...tasks, newTask]);\n    setInput('');\n  };\n\n  const toggleTask = (index) => {\n    const updated = [...tasks];\n    const task = updated[index];\n\n    task.completed = !task.completed;\n    task.completedAt = task.completed ? new Date().toISOString() : null;\n\n    setTasks(updated);\n  };\n\n  const getDuration = (createdAt, completedAt) => {\n    const start = new Date(createdAt);\n    const end = new Date(completedAt);\n    const diffMs = end - start;\n\n    const minutes = Math.floor(diffMs / 60000);\n    const seconds = Math.floor((diffMs % 60000) / 1000);\n\n    return `${minutes}m ${seconds}s`;\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '500px', margin: 'auto', fontFamily: 'Arial' }}>\n      <div style={{ display: 'flex', gap: '10px' }}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Add a task\"\n          style={{ flex: 1 }}\n        />\n        <button onClick={addTask}>Add</button>\n      </div>\n\n      <ul style={{ listStyle: 'none', padding: 0, marginTop: '20px' }}>\n        {tasks.map((task, index) => (\n          <li\n            key={index}\n            style={{\n              marginBottom: '15px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              background: '#f9f9f9',\n              padding: '10px',\n              borderRadius: '5px',\n            }}\n          >\n            <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\n              <input\n                type=\"checkbox\"\n                checked={task.completed}\n                onChange={() => toggleTask(index)}\n              />\n              <div>\n                <div\n                  style={{\n                    textDecoration: task.completed ? 'line-through' : 'none',\n                    color: task.completed ? '#888' : '#000',\n                  }}\n                >\n                  {task.text}\n                </div>\n                <small style={{ color: '#666' }}>\n                  Added: {new Date(task.createdAt).toLocaleString()}\n                  {task.completedAt && (\n                    <>\n                      <br />\n                      Completed: {new Date(task.completedAt).toLocaleString()}<br />\n                      ‚è± Duration: {getDuration(task.createdAt, task.completedAt)}\n                    </>\n                  )}\n                </small>\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default ToDo;\n"],"names":["tasks","setTasks","useState","saved","localStorage","getItem","JSON","parse","input","setInput","useEffect","setItem","stringify","getDuration","createdAt","completedAt","start","Date","diffMs","minutes","Math","floor","seconds","concat","_jsxs","style","padding","maxWidth","margin","fontFamily","children","display","gap","_jsx","type","value","onChange","e","target","placeholder","flex","onClick","addTask","trim","newTask","text","completed","toISOString","listStyle","marginTop","map","task","index","marginBottom","alignItems","justifyContent","background","borderRadius","checked","updated","toggleTask","textDecoration","color","toLocaleString","_Fragment"],"sourceRoot":""}